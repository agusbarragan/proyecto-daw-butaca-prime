import { useState, useEffect } from 'react';
import { collection, addDoc, serverTimestamp, onSnapshot, deleteDoc, doc, getFirestore } from 'firebase/firestore';
import firebaseApp, { auth } from '../firebase-config';
import NavigationBar from './Navbar';
import BackButton from './BackButton';
import { Button, Modal } from 'react-bootstrap';

function Reviews() {
  const [reviews, setReviews] = useState([]);
  const [newReview, setNewReview] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [reviewToDelete, setReviewToDelete] = useState(null);

  const db = getFirestore(firebaseApp);
  const usuario = auth.currentUser.email;

  const addReview = async (event) => {
    event.preventDefault();
    if (!newReview.trim()) {
      alert('El comentario no puede estar en blanco');
      return;
    }
    try {
      const docRef = await addDoc(collection(db, 'reseñas'), {
        comentarios: newReview,
        fecha: serverTimestamp(),
        usuarioEmail: usuario,
      });
      console.log('Document written with ID: ', docRef.id);
      setNewReview(''); // limpiamos el campo de entrada
    } catch (error) {
      console.error('Error adding review: ', error);
    }
  };
  
  const handleDelete = async () => {
    if (reviewToDelete) {
      try {
        await deleteDoc(doc(db, 'reseñas', reviewToDelete.id));
        console.log('Review deleted with ID: ', reviewToDelete.id);
      } catch (error) {
        console.error('Error deleting review: ', error);
      }
      setReviewToDelete(null);
      setShowModal(false);
    }
  };
  
  const handleShowModal = (review) => {
    setReviewToDelete(review);
    setShowModal(true);
  };
  
  useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'reseñas'), (snapshot) => {
      const newReviews = snapshot.docs.map((doc) => ({
        id: doc.id,
        comentarios: doc.data().comentarios,
        usuarioEmail: doc.data().usuarioEmail,
      }));
      setReviews(newReviews);
    });
    return unsubscribe;
  }, [db]);

  return (
    <>
      <NavigationBar />
      <div className='movie-review'>
        <h2 className='text-light'>Comentarios:</h2>

        <div className='d-flex justify-content-center align-items-center'>
          <form onSubmit={addReview} className=''>
            <input
              className='input-group'
              type='text'
              value={newReview}
              onChange={(e) => setNewReview(e.target.value)}
              placeholder='Escribe tu reseña aquí'
            />
            <button type='submit' className='btn btn-primary'>
              Agregar comentario
            </button>
          </form>
        </div>

        <div className='container'>
          <ul className='list-group'>
            {reviews.map((review) => (
              <li key={review.id} className='list-group-item'>
                <div className='d-flex justify-content-between align-items-center'>
                  <div>
                    <p className='mb-0'>{review.comentarios}</p>
                    <small className='text-muted'>{review.usuarioEmail}</small>
                  </div>
                  {review.usuarioEmail === usuario && (
                    <Button variant='danger' onClick={() => handleShowModal(review)}>
                      Eliminar
                    </Button>
                  )}
                </div>
              </li>
            ))}
          </ul>
                    </div>
                    </div>
    </>
  );
}

export default Reviews;
